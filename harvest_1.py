# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# harvest.py
# Created on: 2019-07-26 09:49:34.00000
#   (generated by ArcGIS/ModelBuilder)
# Usage: harvest <cosechas_cartografia__3_> <actas_liberadas__3_> 
# Description: 
# ---------------------------------------------------------------------------

# Import arcpy module
import arcpy
import os
import sys
import shutil
import tempfile

#---------------------------------------------------------
# eliminar SLIVERS
eliminarSliver = True
#---------------------------------------------------------
eco = False    # para tener un trazado de la ejecucion
#----------------------------------------------------------
# campons necesarios : nombre, tipo, largo
#-----------------------------------------------------------
camposNecesarios = [
    ['MES','SHORT',''],
    ['AGNO','SHORT',''],
    ['PCT_AVANCE','DOUBLE',''],
    ['AMES',"TEXT","6"]
    ]
cDissolve = ['TEMPORADA','ZONA','NUM_ACTA']
cDissolve1= ['TEMPORADA','ZONA','NUM_ACTA_1']
sCampos   = [['NUM_ACTA','COUNT'],['AREA','SUM']]
sCampos1  = [['AREA','SUM'],['SUM_AREA','FIRST']]
                                  
mes = camposNecesarios[0][0]
agno= camposNecesarios[1][0]
pct = camposNecesarios[2][0]
ames= camposNecesarios[3][0]

scr,cartografia,actas, inter, ="","","",""
avanceD =""
intersect = "Avance_Cosecha"   # NOMBRE DEL INTERSECT = AVANCE_COSECHA
cfecha    = "FCH_TRAN"         # NOMBRE CAMPO DE LA FECHA DE LA ACTUALIZACION
has       = "AREA"             # CAMPO CON LA SUP EN HAS       
c1        = []
c2        = []
tmpDir    = r"c:\temp"         # DIRECTORIO TEMPORAL 
minArea   = "1000"             # metros2 = 0.1has
eps       = 0.1                # resolucion 10 cm

cwDefecto = r'C:\D\proyectos\2019\ARAUCO_CARTO\actasCosecha\CIERRE_COSECHA_v02.gdb'
cDefecto  = "cosechas_cartografia"
aDefecto  = "actas_liberadas"

NoPlanif  = 'Cosecha_NoPlanificada' # NOMBRE FC DE SALIDA
Remanente = 'Cosecha_NoRealizada'   # NOMBRE FC DE SALIDA

def imprimir(linea):
    print(linea)
    arcpy.AddMessage(linea)
#------------------------------
def agregarHAS(fc, chas):
#------------------------------
    lista = [f.name for f in arcpy.ListFields(fc)]
    if not chas in lista:
        arcpy.AddField_management(fc, chas, "DOUBLE")
    arcpy.CalculateField_management(fc, chas, "[Shape_area] / 10000","VB","")

        
#------------------------------
def agregarCampos(fc,fecha):
#------------------------------
    lista = [f.name for f in arcpy.ListFields(fc)]
    if eco:
        imprimir(lista)
    if not (camposNecesarios[0][0] in lista):
           arcpy.AddField_management(fc,camposNecesarios[0][0],camposNecesarios[0][1])
    if not (camposNecesarios[1][0] in lista):
           arcpy.AddField_management(fc,camposNecesarios[1][0],camposNecesarios[1][1])
    if not (camposNecesarios[2][0] in lista):
           arcpy.AddField_management(fc,camposNecesarios[2][0],camposNecesarios[2][1])
    if not (camposNecesarios[3][0] in lista):
           arcpy.AddField_management(fc,camposNecesarios[3][0],camposNecesarios[3][1],field_length=camposNecesarios[3][2])
    arcpy.CalculateField_management(fc,mes, "MONTH(["+fecha+"])", "VB", "")
    arcpy.CalculateField_management(fc,agno, "YEAR(["+fecha+"])", "VB", "")
    arcpy.CalculateField_management(fc,pct, "100 * [AREA] / [AREA_1]", "VB", "")
    codeb = """def am(a,m):
     ca = str(a)
     mm = str(m)
     if len(mm) == 1:
        mm = '0'+mm
     return (ca + mm)"""
    
    ex1 = "am(!"+ agno +"!,!"+mes+"!)"
    arcpy.CalculateField_management(fc,ames, ex1 , "PYTHON_9.3", codeb)

def etapa1(carto, actas, fecha, salida):
    carto = cws + os.path.sep + carto
    actas =  actas.replace(cws + os.path.sep,"")
    arcpy.env.workspace = scr
    arcpy.env.overwriteOutput = True
    
    avance = scr + os.path.sep + salida
    if eco:
        imprimir("\nETAPA WORKSPACE SALIDA ==>"+ scr+"\nINTERSECCION  ==> AVANCE="+avance+"\nCampos MES,AGNO,AMES,PCT_AVANCE\n")
    
    arcpy.Intersect_analysis([carto, actas], avance, "ALL",eps, "INPUT")
    if fecha <> "": 
       agregarCampos(avance,fecha)    
    return avance

def sliver(fc):
    if eco:
       imprimir("\nETAPA   ==> ELIMINAR SLIVERS\n"+fc)
    expresionA = arcpy.AddFieldDelimiters(fc, "SHAPE_Area")
    expresionB = arcpy.AddFieldDelimiters(fc, "SHAPE_Length")
    expresion = expresionA + " < "+ minArea+" or ("+expresionA +"/"+expresionB+") < 0.25"
    seleccion ="sliver"
    arcpy.MakeFeatureLayer_management(fc, seleccion)
    arcpy.SelectLayerByAttribute_management(seleccion,"NEW_SELECTION", expresion)
    aEliminar = int(arcpy.GetCount_management(seleccion).getOutput(0))
    if aEliminar>0:
        if eco:
            imprimir("Eliminado Slivers...."+str(aEliminar))
            arcpy.DeleteFeatures_management(seleccion)

def crearPoligonos(fc,salida):
    if not arcpy.Exists(scr+os.path.sep+salida):
        if eco:
            imprimir("Creando ..."+salida)
        arcpy.CreateFeatureclass_management(scr, salida, 'POLYGON', template=fc,spatial_reference = fc)
    else:
        if eco:
            imprimir("Truncando ..."+salida)
        arcpy.TruncateTable_management(os.path.sep+salida)
  
def crearSalidas(fc,nPlanif,nRealizada):
    if eco:
        imprimir('\nETAPA 3.  NO COSECHADO & REMANENTE')
    crearPoligonos(fc, nPlanif)
    crearPoligonos(fc, nRealizada)

def procesarAvance(actas):
    dactas = actas+"0"
    arcpy.env.overwrite = True
    if arcpy.Exists(scr + os.path.sep + dactas):
        arcpy.Delete_management(scr + os.path.sep + dactas)
    if eco:
       imprimir(" A DISOLVER "+actas)
       imprimir(cDissolve)
       imprimir(sCampos)
    #imprimir("primer dissolve ="+scr + os.path.sep + dactas)
    arcpy.Dissolve_management(actas, scr + os.path.sep + dactas,cDissolve, sCampos)
    agregarHAS(scr + os.path.sep + dactas,"SUM_AREA")
    salida = etapa1(cartografia, scr + os.path.sep + dactas, "", intersect+"0")
    #imprimir("salida de etap1 ="+salida)
    agregarHAS(salida,"AREA")
    dactas1 = salida[0:len(salida)-1]+"_Global"
    
    if eco:
       imprimir(salida)
       imprimir(dactas1)
    if arcpy.Exists( dactas1):
       arcpy.Delete_management(dactas1)
    
    arcpy.Dissolve_management(salida,  dactas1,cDissolve1,sCampos1)
    arcpy.AddField_management(dactas1,camposNecesarios[2][0],camposNecesarios[2][1])
    arcpy.CalculateField_management(dactas1,pct, "100 * [SUM_AREA] / [FIRST_SUM_AREA]", "VB", "")
    return dactas1
    
def lToc(mxd,fc,groupLayer=""):
    df        = arcpy.mapping.ListDataFrames(mxd, "*")[0]
    addLayer = arcpy.mapping.Layer(fc)
    arcpy.mapping.AddLayer(df, addLayer, "BOTTOM")
    
def resumen(avanceDis):
    imprimir("====================================================================================")
    imprimir("AVANCE COSECHA V1.5")
    imprimir("-------------------")
    imprimir("ESPACIO DE TRABAJO     = "+cws)
    imprimir("COSECHA CARTOGRAFICA   = "+cartografia)
    imprimir("COSECHA PLANIFICADA    = "+actas)
    imprimir(" ")
    imprimir("WORKSPACE SALIDA       = "+scr)
    imprimir("AVANCE COSECHA MENSUAL = "+intersect)
    imprimir("AVANCE COSECHA GLOBAL  = "+avanceDis.replace(scr+os.path.sep,""))
    if eliminarSliver:
        imprimir("Slivers eliminados con MinArea = "+minArea+" m2 or A/P < 0.25")
    imprimir("COSECHA NO PLANIFICADA = "+NoPlanif)
    imprimir("COSECHA NO REALIZADA   = "+Remanente)
    imprimir("CAMPO MES (ENTERO)     = COSECHA CARTOGRAFICA")
    imprimir("CAMPO AGNO(ENTERO)     = COSECHA CARTOGRAFICA")
    imprimir("CAMPO AMES(TEXTO)      = AGNO+MES COSECHA CARTOGRAFICA")
    imprimir("CAMPO PCT_AVANCE(DOBLE)= Porcentaje Avance==> 100 *(HAS CARTO COS/HAS PLANIFICADAS)")
    imprimir("====================================================================================")
    try:
        mxd = arcpy.mapping.MapDocument("CURRENT")
        lToc(mxd, scr + os.path.sep + NoPlanif)
        lToc(mxd, scr + os.path.sep + Remanente)
        lToc(mxd, scr + os.path.sep + intersect)

        lToc(mxd, avanceDis)
        
    except:
        imprimir("No puedo cargar los resultados a TOC")

#---------------------------        
def procesar():
#---------------------------
    arcpy.env.overwriteOutput = True
    avance = etapa1(cartografia,cws + os.path.sep + actas, cfecha, intersect)
    
    crearSalidas(avance, NoPlanif, Remanente)
    union = "union"
    funion = scr + os.path.sep + union

    fcarto = cws + os.path.sep + cartografia
    if not arcpy.Exists(fcarto):
        imprimir("PROBLEMAS CARTO="+cartografia+ " no existe")
        return
    factas = cws + os.path.sep + actas
    if not arcpy.Exists(factas):
        imprimir("PROBLEMAS ACTAS="+actas+ " no existe")
        return
    
        
    arcpy.Union_analysis([[fcarto,1],[factas,2]],funion,"all", eps)
    agregarCampos(funion, cfecha)
    
    noPlanificados = arcpy.AddFieldDelimiters(funion,"FID_"+actas)+ " =-1"
    Remanentes     = arcpy.AddFieldDelimiters(funion,"FID_"+cartografia)+"=-1"
    seleccion = "seleccion"
    arcpy.MakeFeatureLayer_management(funion, seleccion)
    arcpy.SelectLayerByAttribute_management(seleccion,"NEW_SELECTION",noPlanificados)
    arcpy.Append_management(seleccion, scr+os.path.sep+ NoPlanif)

    arcpy.SelectLayerByAttribute_management(seleccion,"NEW_SELECTION",Remanentes)
    arcpy.Append_management(seleccion, scr+os.path.sep+ Remanente,"NO_TEST")

    if eliminarSliver:
        if eco:
            imprimir("\nEliminando Slivers en "+NoPlanif+","+Remanente)
            
        sliver( scr+os.path.sep+NoPlanif)
        sliver (scr+os.path.sep+Remanente)
    # explode los remanantes
    if eco:
        imprimir("MULTIPART TO SINGLE PART...")
    arcpy.MultipartToSinglepart_management(Remanente, Remanente+"1")
    arcpy.Delete_management(Remanente)
    arcpy.Rename_management(Remanente + "1", Remanente)

    avanceDi=procesarAvance(actas)
    resumen(avanceDi)
    

def partir(fc):
    salida = fc
    if arcpy.Exists(fc):
        d = arcpy.Describe(fc)
        return d.baseName
    else:
        pass
    return salida

    
    
if __name__ == '__main__':    
    cws         = arcpy.GetParameterAsText(0)
    cartografia = arcpy.GetParameterAsText(1)
    actas       = arcpy.GetParameterAsText(2)
    minAre      = arcpy.GetParameterAsText(3)
    if cws =='#' or not cws:
       cws = cwDefecto
       if not arcpy.Exists(cws):
           imprimir("WORKSPACE CON CARTOGRAFIA & ACTAS ES OBLIGATORIO")
           sys.exit()
    
    arcpy.env.workspace = cws
    cartografia = partir(cartografia)
    actas       = partir(actas)
     
    if not os.path.isdir(tmpDir):                              # SI NO EXISTE SE CREA DIR TEMPORAL C:\TEMP
           os.mkdir(tmpDir)

    if not arcpy.Exists(tmpDir + os.path.sep + "actas.gdb"):   # SI NO EXISTE SE CREA ACTAS.GDB
       arcpy.CreateFileGDB_management(tmpDir, "actas")
    scr = tmpDir + os.path.sep + "actas.gdb"
    

    if cartografia == "#" or not cartografia:
        cartografia = cDefecto
        
    if not arcpy.Exists(cws + os.path.sep + cartografia):
        imprimir("COSECHA CARTOFRAFICA =" + cartografia + " no existe("+cws+")")
        sys.exit()
    else:
         c1 = [f.name for f in arcpy.ListFields(cartografia)]
         if cfecha not in c1:
             imprimir("COSECHA CARTOGRAFICA SIN CAMPO FECHA="+cfecha)
             sys.exit()
         if has not in c1:
             imprimir("COSECHA CARTOGRAFICA SIN CAMPO "+ has)
             sys.exit()        
    if actas == "#" or not actas:
        actas = aDefecto
        
    if not arcpy.Exists(cws + os.path.sep + actas):
        imprimir("COSECHA PLANIFICADA =" + actas + " no existe("+cws+")")
        sys.exit()
    else:
        c2 = [f.name for f in arcpy.ListFields(actas)]
        if has not in c2:
             imprimir("COSECHA PLANIFICADA SIN CAMPO "+has)
             sys.exit()
    if minAre =="#" or not minAre:
        minAre = minArea

    minArea = minAre

    # RECALCULAR LAS HAS
    agregarHAS(cartografia, has)
    agregarHAS(actas, has)
    if eco:
        imprimir("COMENZANDO....")
        imprimir("ESPACIO DE TRABAJO   = "+cws)
        imprimir("COSECHA CARTOGRAFICA = "+cartografia)
        imprimir("COSECHA PLANIFICADA  = "+actas)
        imprimir("SCRATCH DE TRABAJO   = "+scr)

    procesar()
    arcpy.env.workspace = cws
        


